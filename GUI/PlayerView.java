/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import NapakalakiGame.Napakalaki;
import NapakalakiGame.Player;
import NapakalakiGame.Treasure;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.JPanel;

/**
 *
 * @author antonio
 */
public class PlayerView extends javax.swing.JPanel {
    
    // Jugador a representar
    private Player playerModel;
    private Napakalaki napakalakiModel;
    private NapakalakiView vistaNapakalaki;
    /**
     * Creates new form PlayerView
     */
    public PlayerView() {
        initComponents();
    }
    
    // Método que le da valor al atributo napakalakiModel
    public void setNapakalaki(Napakalaki np, NapakalakiView vista){
        napakalakiModel=np;
        vistaNapakalaki=vista;
        repaint();
    }
    
    public void pintarMalaConsecuencia(){
        pendingBadConsequenceView1.setPendingBadConsequence(playerModel.getPendingBad());
    }
    
    // Método que da valor a playerModel
    public void setPlayer(Player p){
        playerModel = p;
        // Incluir instrucciones para actualizar su nombre, nivel, etc.
        // A continuación se actualizan sus tesoros
        this.fillTreasurePanel(visibleTreasures,playerModel.getVisibleTreasures());
        this.fillTreasurePanel(hiddenTreasures,playerModel.getHiddenTreasures());
        
        if(playerModel.getHiddenTreasures().size() != 0 || playerModel.getVisibleTreasures().size() != 0){
            this.DiscardAllTreasures.setEnabled(true);
            this.DescartarTesoroOculto.setEnabled(true);
        }
        else
            this.DescartarTesoroOculto.setEnabled(false);
        
        if(playerModel.getHiddenTreasures().size() != 0)
            this.MakeVisible.setEnabled(true);
        else
            this.MakeVisible.setEnabled(false);
        
        
        if(p.getPendingBad() != null)
            pendingBadConsequenceView1.setPendingBadConsequence(p.getPendingBad());
        
        if(p.canISteal()){
            this.stealTreasure.setEnabled(true);
            puedeRobar.setText("si puedes robar");
        }
        else
            puedeRobar.setText("no puedes robar");
            
        Nombre.setText("Nombre: " + p.getName());
        nivel.setText("Nivel: " + p.getTextLevel());
        enemigo.setText("Enemigo: " + p.getNameEnemy());
        niveldecombate.setText("Nivel de combate " + p.getTextCombatLevel());
        sectario.setText("Sectario: " + p.getSectario());
        
        repaint();
        revalidate();
    }
    
    public void botones(boolean opcion){
        if(opcion){
            this.MakeVisible.setEnabled(false);
            this.DescartarTesoroOculto.setEnabled(false);
            this.DiscardAllTreasures.setEnabled(false);
        }
        repaint();
        revalidate();
    }
    
    
    // Se recorren los tesoros que contiene el panel,
    // almacenando en un vector aquellos que están seleccionados.
    // Finalmente se devuelve dicho vector.
    private ArrayList<Treasure> getSelectedTreasures(JPanel aPanel) {
        TreasureView tv;
        ArrayList<Treasure> output = new ArrayList();
            for (Component c : aPanel.getComponents()) {
                tv = (TreasureView) c;
                if ( tv.isSelected() )
                    output.add ( tv.getTreasure() );
            }
        return output;
    }
    
    private void fillTreasurePanel (JPanel aPanel, ArrayList<Treasure> aList) {
        // Se elimina la información antigua, si la hubiera
        aPanel.removeAll();
        // Se recorre la lista de tesoros construyendo y añadiendo sus vistas
        // al panel
        for (Treasure t : aList) {
            TreasureView aTreasureView = new TreasureView();
            aTreasureView.setTreasure (t);
            aTreasureView.setVisible (true);
            aPanel.add (aTreasureView);
        }
        
        // Se fuerza la actualización visual del panel
        aPanel.repaint();
        aPanel.revalidate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Nombre = new javax.swing.JLabel();
        nivel = new javax.swing.JLabel();
        puedeRobar = new javax.swing.JLabel();
        niveldecombate = new javax.swing.JLabel();
        enemigo = new javax.swing.JLabel();
        sectario = new javax.swing.JLabel();
        hiddenTreasures = new javax.swing.JPanel();
        stealTreasure = new javax.swing.JButton();
        MakeVisible = new javax.swing.JButton();
        DescartarTesoroOculto = new javax.swing.JButton();
        DiscardAllTreasures = new javax.swing.JButton();
        visibleTreasures = new javax.swing.JPanel();
        pendingBadConsequenceView1 = new GUI.PendingBadConsequenceView();

        Nombre.setText("Nombre");

        nivel.setText("nivel");

        puedeRobar.setText("puedeRobar");

        niveldecombate.setText("nivel de combate");

        enemigo.setText("enemigo");

        sectario.setText("sectario");

        hiddenTreasures.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        stealTreasure.setText("RobarTesoro");
        stealTreasure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stealTreasureActionPerformed(evt);
            }
        });

        MakeVisible.setText("HacerVisible");
        MakeVisible.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MakeVisibleActionPerformed(evt);
            }
        });

        DescartarTesoroOculto.setText("DescartarTesoro");
        DescartarTesoroOculto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DescartarTesoroOcultoActionPerformed(evt);
            }
        });

        DiscardAllTreasures.setText("DescartarTodosLosTesoros");
        DiscardAllTreasures.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DiscardAllTreasuresActionPerformed(evt);
            }
        });

        visibleTreasures.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addComponent(stealTreasure)
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addComponent(DescartarTesoroOculto))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(MakeVisible)
                                .addGap(18, 18, 18)
                                .addComponent(DiscardAllTreasures)))
                        .addGap(74, 74, 74))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nivel)
                            .addComponent(puedeRobar)
                            .addComponent(Nombre)
                            .addComponent(sectario)
                            .addComponent(enemigo)
                            .addComponent(niveldecombate))
                        .addGap(79, 79, 79)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(hiddenTreasures, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(visibleTreasures, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)))
                .addComponent(pendingBadConsequenceView1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(Nombre)
                                .addGap(23, 23, 23)
                                .addComponent(nivel)
                                .addGap(18, 18, 18)
                                .addComponent(puedeRobar))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(hiddenTreasures, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(niveldecombate)
                                .addGap(18, 18, 18)
                                .addComponent(enemigo)
                                .addGap(18, 18, 18)
                                .addComponent(sectario))
                            .addComponent(visibleTreasures, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(stealTreasure)
                            .addComponent(MakeVisible)
                            .addComponent(DiscardAllTreasures)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(pendingBadConsequenceView1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(DescartarTesoroOculto)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void stealTreasureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stealTreasureActionPerformed
        if(playerModel.canISteal() && playerModel.getEnemy().canYouGiveMeATreasure()){
            this.stealTreasure.setEnabled(false);
            this.playerModel.stealTreasure();
            puedeRobar.setText("no");
            this.setPlayer(napakalakiModel.getCurrentPlayer());
            
        }
        
    }//GEN-LAST:event_stealTreasureActionPerformed

    private void MakeVisibleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MakeVisibleActionPerformed
        ArrayList<Treasure> selHidden = getSelectedTreasures (hiddenTreasures);
        if(selHidden != null){
            napakalakiModel.makeTreasuresVisible(selHidden);
            setPlayer(napakalakiModel.getCurrentPlayer());
            
        }
        repaint();
        revalidate();
        
    }//GEN-LAST:event_MakeVisibleActionPerformed

    // Este método en realidad vale para visibles o ocultos
    private void DescartarTesoroOcultoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DescartarTesoroOcultoActionPerformed
        ArrayList<Treasure> listaV, listaH;
        listaH = this.getSelectedTreasures(hiddenTreasures); // obtiene los obj marcados
        this.napakalakiModel.discardHiddenTreasures(listaH); // Descarta las cartas
        
        listaV = getSelectedTreasures(visibleTreasures); // Obtiene la lista de visibles
        
        this.napakalakiModel.discardVisibleTreasures(listaV); // Descarta tesoros visibles
        int ocultos = playerModel.getHiddenTreasures().size();
        int visible = playerModel.getVisibleTreasures().size();
        System.out.println("Cantidad de tesoros " + ocultos + " " + visible );
        setPlayer(napakalakiModel.getCurrentPlayer()); // Actualizamos el jugador
        this.vistaNapakalaki.activarSiguienteTurno();
        repaint();
        revalidate();
    
    }//GEN-LAST:event_DescartarTesoroOcultoActionPerformed

    private void DiscardAllTreasuresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DiscardAllTreasuresActionPerformed
        this.DescartarTesoroOculto.setEnabled(false); // Boton: Descartar tesoro oculto a false
        this.DiscardAllTreasures.setEnabled(false); // Boton: Descartar todos los tesoros
        // Llamamos al método del obj napakalaki para que elimine y guarde los tesoros en el mazo
        this.playerModel.discardAllTreasures();
        this.setPlayer(napakalakiModel.getCurrentPlayer()); // Actualiza jugador
        this.vistaNapakalaki.activarSiguienteTurno();
        repaint();
        revalidate();
        
    }//GEN-LAST:event_DiscardAllTreasuresActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DescartarTesoroOculto;
    private javax.swing.JButton DiscardAllTreasures;
    private javax.swing.JButton MakeVisible;
    private javax.swing.JLabel Nombre;
    private javax.swing.JLabel enemigo;
    private javax.swing.JPanel hiddenTreasures;
    private javax.swing.JLabel nivel;
    private javax.swing.JLabel niveldecombate;
    private GUI.PendingBadConsequenceView pendingBadConsequenceView1;
    private javax.swing.JLabel puedeRobar;
    private javax.swing.JLabel sectario;
    private javax.swing.JButton stealTreasure;
    private javax.swing.JPanel visibleTreasures;
    // End of variables declaration//GEN-END:variables
}
